with pd as (SELECT 
    CASE 
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.41620374523679 23.815249304567306, 90.41771446643587 23.80807412157192, 90.41857587519829 23.808531275327184, 90.41889906959982 23.811677324912996, 90.42032792905907 23.813180778020747, 90.41930199946216 23.814410664122338, 90.41842650410149 23.81574047447803, 90.41620374523679 23.815249304567306))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P1'
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.42370129007567 23.79818836618859, 90.4254282942315 23.78315029556262, 90.42671589606442 23.775883177177548, 90.43178651143097 23.775607434784096, 90.43281251221225 23.781443912895302, 90.43221279726696 23.78868671628177, 90.43181274440538 23.799270138697917, 90.42662553804094 23.799488825666977, 90.42370129007567 23.79818836618859))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P2'
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.42272769838166 23.790832842367365, 90.42050728201451 23.780610816367236, 90.41937908580724 23.780078728059856, 90.4193707229543 23.777115887707048, 90.42331467598852 23.775689096945683, 90.42362268144254 23.780546272799857, 90.42493754284031 23.78103085414713, 90.4238790896714 23.79164267499674, 90.42272769838166 23.790832842367365))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P3'
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.40285891523766 23.773755197696598, 90.40457399021818 23.772638677301035, 90.40523157709563 23.771609353670286, 90.40675975390602 23.773676639998495, 90.41025540631036 23.77342762936942, 90.41038609089213 23.78035196972163, 90.40282432226026 23.780515525435163, 90.40285891523766 23.773755197696598))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P4'
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.39398388888216 23.785875435796406, 90.39260858620968 23.78353086832486, 90.39212075944508 23.778036217091717, 90.395468826848 23.77754653787093, 90.3943359288154 23.775175740281863, 90.39828916962718 23.775778031897076, 90.39991727049929 23.773920215630184, 90.40288010563219 23.773707278429153, 90.40263032491772 23.780840791690807, 90.39824357207398 23.78120436027331, 90.3985728132305 23.7829191016806, 90.39919843848318 23.7857794081503, 90.39646862025829 23.78512101860812, 90.39573905940635 23.78690872559664, 90.39398388888216 23.785875435796406))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P5'
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.39767402148003 23.795773649801138, 90.3973202618184 23.788252527480687, 90.39920042398637 23.78669673948316, 90.40005997225462 23.787013881458254, 90.40177401887892 23.79718682122235, 90.39767402148003 23.795773649801138))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P6'
        WHEN ST_CONTAINS(ST_GEOGFROMTEXT('POLYGON ((90.40375186597626 23.799330985802154, 90.40629340352196 23.79828767916626, 90.40751332408553 23.800506467853143, 90.41185746339416 23.800488297581378, 90.41084595502005 23.80406499670945, 90.40598656840358 23.805069521689973, 90.40375186597626 23.799330985802154))'), ST_GEOGPOINT(data.longitude, data.latitude)) THEN 'Gulshan_P7'

END AS area_name,code,products.pd_product_variation_id,products.pd_product_id,vendor_code,format_date("%Y-%m",created_date_local) as month
  from `table1` data, unnest(products) as products
  where global_entity_id = "BD"
  and created_date_utc >= '2023-11-01'
  and created_date_local >= '2023-11-01'
  and is_valid_order),

ctl_products as (
SELECT ctl_menu_category_id,menu_category_title,ctl.title,variations.id as variation_id,ctl.id
FROM `table2` ctl
left join ctl.variations as variations
WHERE global_entity_id = "BD"
and ctl.is_deleted = false
and variations.is_deleted = False
and (
lower(menu_category_title) like "%pizza%"
or lower(ctl.title) like "%pizza%"
)
order by ctl_menu_category_id
),


code as (select distinct area_name,code,month
    from ctl_products
    left join
    pd
    on ctl_products.id = pd.pd_product_id
    and ctl_products.variation_id = pd.pd_product_variation_id
    where area_name is not null)


select code.area_name,code.month,count(order_code) as orders,sum(gmv_gross_local) as gmv,sum(gfv_gross_local) as gfv
from code
left join
`table3` bd
on code.code = bd.order_code
group by 1,2
order by 1 ASC, 2 ASC
